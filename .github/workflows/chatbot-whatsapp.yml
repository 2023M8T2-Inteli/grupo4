name: Chatbot WhatsApp

on:
  push:
    branches: ["main"]
    paths:
      - 'src/chatbot/**'

jobs:
  CI_Dashboard:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Create .env file
        working-directory: ./src/chatbot
        run: |
          echo "JWT_SECRET=$JWT_SECRET" > .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "BUCKET_FILE=$BUCKET_FILE" >> .env
          echo "ACCESS_KEY_ID=$ACCESS_KEY_ID" >> .env
          echo "SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> .env
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> .env
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BUCKET_FILE: ${{ secrets.BUCKET_FILE }}
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}

      - name: Test the Chatbot Build
        working-directory: ./src/chatbot
        run: docker build . --file Dockerfile --tag chatbot:latest

      - name: Test the Backend Run
        working-directory: ./src/chatbot
        run: docker run -d -p 3000:3000 chatbot:latest

      - name: Clean up Docker Compose
        working-directory: ./src/
        run: docker-compose -f docker-compose.yml down -v

  CD_Dashboard:
    runs-on: ubuntu-latest
    needs: [CI_Dashboard]
    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Check the files
        run: |
          ls -la

      - name: Set the CHMOD
        working-directory: ./src/chatbot
        run: |
          chmod 400 ./kp-back-grupo6.pem
          ls -la

      - name: Create .env file on EC2 
        working-directory: ./src/backend
        run: |
          echo "JWT_SECRET=$JWT_SECRET" > .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo "BUCKET_FILE=$BUCKET_FILE" >> .env
          echo "ACCESS_KEY_ID=$ACCESS_KEY_ID" >> .env
          echo "SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> .env
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> .env
          ls -la

          scp -i ./../../kp-back-grupo6.pem -o StrictHostKeyChecking=no ./.env ubuntu@18.205.12.200:grupo6/src/backend/
          
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          BUCKET_FILE: ${{ secrets.BUCKET_FILE }}
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}

      - name: Down Docker Compose on EC2
        run: |
          ls -la
          ssh_command="${{ secrets.SSH_COMMAND_ACCESS_DASHBOARD }}"
          $ssh_command 'ls -la && cd grupo6/src && docker-compose down -v && docker system prune -a --force'

      - name: Update Docker Compose on EC2 (Backend)
        run: |
          ssh_command="${{ secrets.SSH_COMMAND_ACCESS_DASHBOARD }}"
          $ssh_command 'ls -la && cd grupo6/src && git checkout main && git pull origin main'

      - name: Run Container Frontend on EC2
        run: |
          ssh_command="${{ secrets.SSH_COMMAND_ACCESS_DASHBOARD }}"
          $ssh_command 'ls -la && cd grupo6/src && docker-compose up -d frontend'

      - name: Run Container Backend on EC2
        run: |
          ssh_command="${{ secrets.SSH_COMMAND_ACCESS_DASHBOARD }}"
          $ssh_command 'ls -la && cd grupo6/src && docker-compose up -d backend'
  