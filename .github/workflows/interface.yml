name: Interface

on:
  push:
    branches: ["main"]
    paths:
      - "src/interface/**"

  workflow_dispatch:

jobs:
  TEST_INTERFACE:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Create .env file (BACKEND)
        working-directory: ./src/interface/backend
        run: |
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo PRIVATE_KEY=$PRIVATE_KEY >> .env
          echo TYPE=$TYPE >> .env
          echo PROJECT_ID=$PROJECT_ID >> .env
          echo PRIVATE_KEY_ID=$PRIVATE_KEY_ID >> .env
          echo CLIENT_EMAIL=$CLIENT_EMAIL >> .env
          echo CLIENT_ID=$CLIENT_ID >> .env
          echo AUTH_URI=$AUTH_URI >> .env
          echo TOKEN_URI=$TOKEN_URI >> .env
          echo AUTH_PROVIDER_X509_CERT_URL=$AUTH_PROVIDER_X509_CERT_URL >> .env
          echo CLIENT_X509_CERT_URL=$CLIENT_X509_CERT_URL >> .env
          echo UNIVERSE_DOMAIN=$UNIVERSE_DOMAIN >> .env

        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          TYPE: ${{ secrets.TYPE }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AUTH_URI: ${{ secrets.AUTH_URI }}
          TOKEN_URI: ${{ secrets.TOKEN_URI }}
          AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
          CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
          UNIVERSE_DOMAIN: ${{ secrets.UNIVERSE_DOMAIN }}

      - name: Create .env file (ADMIN)
        working-directory: ./src/interface/admin
        run: |
          echo "NEXT_PUBLIC_HOST=$NEXT_PUBLIC_HOST" >> .env
          echo "NEXT_PUBLIC_SOCKET=$NEXT_PUBLIC_SOCKET" >> .env
        env:
          NEXT_PUBLIC_HOST: ${{ secrets.NEXT_PUBLIC_HOST }}
          NEXT_PUBLIC_SOCKET: ${{ secrets.NEXT_PUBLIC_SOCKET }}

      - name: Create .env file (ROBOT)
        working-directory: ./src/interface/robot
        run: |
          echo "NEXT_PUBLIC_HOST=$NEXT_PUBLIC_HOST" >> .env
          echo "NEXT_PUBLIC_SOCKET=$NEXT_PUBLIC_SOCKET" >> .env
        env:
          NEXT_PUBLIC_HOST: ${{ secrets.NEXT_PUBLIC_HOST }}
          NEXT_PUBLIC_SOCKET: ${{ secrets.NEXT_PUBLIC_SOCKET }}

      - name: Configure Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Test the Backend container
        working-directory: ./src/interface/backend
        run: docker-compose up -d backend

      - name: Test the Admin Interface container
        working-directory: ./src/interface/admin
        run: docker-compose up -d admin

      - name: Test the Robot Interface container
        working-directory: ./src/interface/robot
        run: docker-compose up -d robot

      - name: Clean up Docker Compose
        working-directory: ./src/interface
        run: docker-compose -f docker-compose.yml down -v

  CI_INTERFACE:
    runs-on: ubuntu-latest
    needs: [TEST_INTERFACE]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file (BACKEND)
        working-directory: ./src/interface/backend
        run: |
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
          echo "DATABASE_URL=$DATABASE_URL" >> .env
          echo PRIVATE_KEY=$PRIVATE_KEY >> .env
          echo TYPE=$TYPE >> .env
          echo PROJECT_ID=$PROJECT_ID >> .env
          echo PRIVATE_KEY_ID=$PRIVATE_KEY_ID >> .env
          echo CLIENT_EMAIL=$CLIENT_EMAIL >> .env
          echo CLIENT_ID=$CLIENT_ID >> .env
          echo AUTH_URI=$AUTH_URI >> .env
          echo TOKEN_URI=$TOKEN_URI >> .env
          echo AUTH_PROVIDER_X509_CERT_URL=$AUTH_PROVIDER_X509_CERT_URL >> .env
          echo CLIENT_X509_CERT_URL=$CLIENT_X509_CERT_URL >> .env
          echo UNIVERSE_DOMAIN=$UNIVERSE_DOMAIN >> .env

        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          TYPE: ${{ secrets.TYPE }}
          PROJECT_ID: ${{ secrets.PROJECT_ID }}
          PRIVATE_KEY_ID: ${{ secrets.PRIVATE_KEY_ID }}
          CLIENT_EMAIL: ${{ secrets.CLIENT_EMAIL }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          AUTH_URI: ${{ secrets.AUTH_URI }}
          TOKEN_URI: ${{ secrets.TOKEN_URI }}
          AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.AUTH_PROVIDER_X509_CERT_URL }}
          CLIENT_X509_CERT_URL: ${{ secrets.CLIENT_X509_CERT_URL }}
          UNIVERSE_DOMAIN: ${{ secrets.UNIVERSE_DOMAIN }}

      - name: Create .env file (ADMIN)
        working-directory: ./src/interface/admin
        run: |
          echo "NEXT_PUBLIC_HOST=$NEXT_PUBLIC_HOST" >> .env
          echo "NEXT_PUBLIC_SOCKET=$NEXT_PUBLIC_SOCKET" >> .env
        env:
          NEXT_PUBLIC_HOST: ${{ secrets.NEXT_PUBLIC_HOST }}
          NEXT_PUBLIC_SOCKET: ${{ secrets.NEXT_PUBLIC_SOCKET }}

      - name: Create .env file (ROBOT)
        working-directory: ./src/interface/robot
        run: |
          echo "NEXT_PUBLIC_HOST=$NEXT_PUBLIC_HOST" >> .env
          echo "NEXT_PUBLIC_SOCKET=$NEXT_PUBLIC_SOCKET" >> .env
        env:
          NEXT_PUBLIC_HOST: ${{ secrets.NEXT_PUBLIC_HOST }}
          NEXT_PUBLIC_SOCKET: ${{ secrets.NEXT_PUBLIC_SOCKET }}

      - name: Build, tag, and push image to Amazon ECR (BACKEND)
        working-directory: ./src/interface/backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: interface-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push image to Amazon ECR (ADMIN)
        working-directory: ./src/interface/admin
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: interface-admin
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push image to Amazon ECR (ROBOT)
        working-directory: ./src/interface/robot
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: interface-robot
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  CD_INTERFACE:
    runs-on: ubuntu-latest
    needs: [CI_INTERFACE]
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        working-directory: ./src/interface
        run: |
          echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> .env
          echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> .env
          echo "AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> .env
          echo "AWS_REGION=$AWS_REGION" >> .env
          chmod 400 ./ec2_key_par.pem &&
          scp -i ./ec2_key_par.pem -o StrictHostKeyChecking=no ./.env ubuntu@107.22.195.153:.env
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1

      - name: Runnig EC2
        working-directory: ./src/interface
        run: |
          chmod 400 ./ec2_key_par.pem && ssh -o StrictHostKeyChecking=no -i "./ec2_key_par.pem" ubuntu@107.22.195.153 'chmod +x ./script.sh && bash ./script.sh'
