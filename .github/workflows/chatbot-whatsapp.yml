name: Chatbot WhatsApp

on:
  push:
    branches: ["main"]
    paths:
      - 'src/chatbot/**'


jobs:
  CI_CHATBOT:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Create .env file (ETL)
        working-directory: ./src/chatbot/
        run: |
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_NAME=$DB_NAME" >> .env
          echo "ACCESS_KEY_ID=$ACCESS_KEY_ID" >> .env
          echo "SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> .env
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> .env
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}

      - name: Configure Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker Compose
        working-directory: ./src/lambdas/etl
        run: docker build --platform linux/amd64 -t etl-lambda:latest .

      - name: Clean up Docker Compose
        working-directory: ./src/lambdas/etl
        run: docker rmi etl-lambda:latest && docker system prune -a
      
  CD_CHATBOT:
    runs-on: ubuntu-latest
    needs: [CI_CHATBOT]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Create .env file (ETL)
        working-directory: ./src/lambdas/etl
        run: |
          echo "DB_USER=$DB_USER" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_HOST=$DB_HOST" >> .env
          echo "DB_PORT=$DB_PORT" >> .env
          echo "DB_NAME=$DB_NAME" >> .env
          echo "ACCESS_KEY_ID=$ACCESS_KEY_ID" >> .env
          echo "SECRET_ACCESS_KEY=$SECRET_ACCESS_KEY" >> .env
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> .env
        env:
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }}
          SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }}
          SESSION_TOKEN: ${{ secrets.SESSION_TOKEN }}
          
      - name: Build, tag, and push image to Amazon ECR
        working-directory: ./src/lambdas/etl
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: etl-lambda
          IMAGE_TAG: latest
        run: |
          docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG